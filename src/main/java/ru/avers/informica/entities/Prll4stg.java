package ru.avers.informica.entities;

import ru.avers.informica.entities.abstraction.CItem;
import ru.avers.informica.entities.dicts.CDict09Parallel;

import javax.persistence.*;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

// TODO нет соответствия в новой БД
/**
 * Prll4stg generated by hbm2java
 */
@Entity
@Table(name="PRLL4STG")
@SequenceGenerator(name="SEQ_GEN", sequenceName="GEN_PRLL4STG_ID")
public class Prll4stg extends CItem {

    public final static String S_ID = "m_id",
                               S_ID_UCH = "m_stage_uch.m_uch.m_id",
                               S_UCH_NAME_FIELD = "m_stage_uch.m_uch." + Uch.S_NM_FIELD,
                               S_UCH_SNM_FIELD = "m_stage_uch.m_uch." + Uch.S_SNM_FIELD,
                               S_UCH_NUM_FIELD = "m_stage_uch.m_uch." + Uch.S_NUM_FIELD,
                               S_UCH_TER_NM_FIELD = "m_stage_uch.m_uch." + Uch.S_TER_NAME_FIELD,
                               S_PRLL_NAME_FIELD = "m_parallel.m_name",
                               S_NVACANT_FIELD = "m_uchInfo4Inqry.NVacant",
                               S_STGUCH = "m_stage_uch",
                               S_PRLL = "m_parallel";

    @ManyToOne(fetch= FetchType.EAGER, cascade= CascadeType.ALL)
    @JoinColumn(name="ID_STGUCH")
    private StageUch m_stage_uch;

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "ID_PRLL")
    private CDict09Parallel m_parallel;

    @Column(name = "NPRLL")
    private Integer m_nprll;

    @Temporal(value = TemporalType.TIMESTAMP)
    @Column(name = "DS")
    private Date m_ds;

    @Temporal(value = TemporalType.TIMESTAMP)
    @Column(name = "DF")
    private Date m_df;

    @OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "m_prll4stg")
    private List<UchInfo4inqry> m_uchInfo4inqries = new ArrayList<UchInfo4inqry>(0);
    
    public Prll4stg() { 
        super();
    }

    public Prll4stg(Integer p_id) {
        super(p_id);
    }

    public Prll4stg(StageUch p_stage_uch, CDict09Parallel p_parallel) {
        super();
        init(p_stage_uch, p_parallel);
    }
    public Prll4stg(Integer p_id, StageUch p_stage_uch, CDict09Parallel p_parallel) {
        super(p_id);
        init(p_stage_uch, p_parallel);
    }
    private void init(StageUch p_stage_uch, CDict09Parallel p_parallel) {
        m_stage_uch = p_stage_uch;
        m_parallel = p_parallel;
    }
    
    
    public StageUch getStageUch() {
        return this.m_stage_uch;
    }
    
    public void setStageUch(StageUch stageUch) {
        this.m_stage_uch = stageUch;
    }
    public CDict09Parallel getParallel() {
        return this.m_parallel;
    }
    
    public void setParallel(CDict09Parallel dictsDetail) {
        this.m_parallel = dictsDetail;
    }
    
    public Integer getNprll() {
        return this.m_nprll;
    }
    
    public void setNprll(Integer nprll) {
        this.m_nprll = nprll;
    }
    public Date getDs() {
        return this.m_ds;
    }
    
    public void setDs(Date ds) {
        this.m_ds = ds;
    }
    public Date getDf() {
        return this.m_df;
    }
    
    public void setDf(Date df) {
        this.m_df = df;
    }

    public List<UchInfo4inqry> getUchInfo4inqries() {
        return this.m_uchInfo4inqries;
    }
    
    public void setUchInfo4inqries(List<UchInfo4inqry> uchInfo4inqries) {
        this.m_uchInfo4inqries = uchInfo4inqries;
    }
    
}
