package ru.avers.informica.entities;


import ru.avers.informica.entities.abstraction.CItem;

import javax.persistence.*;
import java.util.ArrayList;
import java.util.List;

// TODO нет пока аналога таблицы в новой БД
/**
 * Uch generated by hbm2java
 */
@Entity
@Table(name="UCH")
@SequenceGenerator(name="SEQ_GEN", sequenceName="GEN_UCH_ID")
public class Uch extends CItem {

    public final static String S_INN_FIELD = "inn",
                               S_KPP_FIELD = "kpp",
                               S_OKPO_FIELD = "okpo",
                               S_OGRN_FIELD = "ogrn",
                               S_CODE_FIELD = "m_code",
                               S_ID_MAIN_UCH = "m_main_uch.id",
                               S_NUM_FIELD = "uchVar.num",
                               S_NM_FIELD = "uchVar.nm",
                               S_SNM_FIELD = "uchVar.snm",
                               S_CHIEF_FIELD = "uchVar.chief",
                               S_TYPE_ID_FIELD = "uchVar.m_tu.m_id",
                               S_TYPE_NAME_FIELD = "uchVar.m_tu.m_name",
                               S_TER_ID_FIELD = "uchVar.m_ter.m_id",
                               S_TER_NAME_FIELD = "uchVar.m_ter.m_name";
    
    @ManyToOne(fetch = FetchType.LAZY, cascade = CascadeType.ALL)
    @JoinColumn(name = "ID_MAIN_UCH")
    private Uch m_main_uch;
    public Uch getMainUch() { return m_main_uch; }
    public void setMainUch(Uch p_main_uch) { m_main_uch = p_main_uch; }
    
    // структурные подразделения
    @OneToMany(mappedBy = "m_main_uch", fetch = FetchType.LAZY, cascade = CascadeType.ALL)
    private List<Uch> m_subdivisions = new ArrayList<Uch>();
    public List<Uch> getSubDivisions() { return m_subdivisions; }
    public void setSubDivisions(List<Uch> p_subdivisions) { m_subdivisions = p_subdivisions; }
    
    @Column(name="INN")
    private String inn;
    public String getInn() { return this.inn; }
    public void setInn(String inn) { this.inn = inn; }

    @Column(name="KPP")
    private String kpp;
    public String getKpp() { return this.kpp; }
    public void setKpp(String kpp) { this.kpp = kpp; }

    @Column(name="OKPO")
    private String okpo;
    public String getOkpo() { return this.okpo; }
    public void setOkpo(String okpo) { this.okpo = okpo; }

    @Column(name="OGRN")
    private String ogrn;
    public String getOgrn() { return this.ogrn; }
    public void setOgrn(String ogrn) { this.ogrn = ogrn; }

    @Column(name = "CODE")
    private String m_code;
    public String getCode() { return this.m_code; }
    public void setCode(String code) { this.m_code = code; }
    
    @Column(name = "MUNICIP_OBR_OKATO")
    private String m_municip_obr_okato;
    public String getMunicipObrOkato() { return m_municip_obr_okato; }
    public void setMunicipObrOkato(String p_val) { m_municip_obr_okato = p_val; }
    
    @Column(name = "MUNICIP_OBR_OKTMO")
    private String m_municip_obr_oktmo;
    public String getMunicipObrOktmo() { return m_municip_obr_oktmo; }
    public void setMunicipObrOktmo(String p_val) { m_municip_obr_oktmo = p_val; }
    
    @OneToOne(cascade= CascadeType.ALL, mappedBy="uch", fetch= FetchType.LAZY, orphanRemoval=true)
    private UchVar uchVar;
    public UchVar getUchVar() { return this.uchVar; }
    public void setUchVar(UchVar uchVar) { this.uchVar = uchVar; }
    
    @OneToMany(cascade= CascadeType.ALL, fetch= FetchType.LAZY, mappedBy="m_uch")
    private List<UchInfo4inqry> m_uchInfo4inqries = new ArrayList<UchInfo4inqry>(0);
    public List<UchInfo4inqry> getUchInfo4inqries() { return this.m_uchInfo4inqries; }
    public void setUchInfo4inqries(List<UchInfo4inqry> p_uchInfo4inqries) { this.m_uchInfo4inqries = p_uchInfo4inqries; }

    @OneToMany(cascade= CascadeType.ALL, fetch= FetchType.LAZY, mappedBy="m_uch", orphanRemoval=true)
    private List<AddrUch> m_addresses = new ArrayList<AddrUch>();
    public List<AddrUch> getAddresses() { return m_addresses; }
    public void setAddresses(List<AddrUch> p_val) { m_addresses = p_val; }

    @OneToMany(cascade= CascadeType.ALL, fetch= FetchType.LAZY, mappedBy="m_uch", orphanRemoval=true)
    private List<Contact> m_contacts = new ArrayList<Contact>();
    public List<Contact> getContacts() { return m_contacts; }
    public void setContacts(List<Contact> p_val) { m_contacts = p_val; }
            
    @OneToMany(cascade= CascadeType.ALL, fetch= FetchType.LAZY, mappedBy="m_uch")
    private List<Inqryuch> m_inqryuch = new ArrayList<Inqryuch>(0);
    public List<Inqryuch> getInqryUchs() { return this.m_inqryuch; }
    public void setInqryUchs(List<Inqryuch> p_inqryuch) { this.m_inqryuch = p_inqryuch; }

    public Uch() { super(); }
    public Uch(Integer p_id) { super(p_id); }
    
    @Override
    public String toString() {
        return
            Uch.class.getName() + " {" +
            super.toString() +
            "; code = " + String.valueOf(m_code) +
            "}";
    }

}
